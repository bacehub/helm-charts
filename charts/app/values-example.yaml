kind: StatefulSet
fullnameOverride: galactus
envFrom:
- configMapRef:
    name: app-config
- secretRef:
    name: gel
revision: "production"
reloader: true
image:
  repository: ghcr.io/example/super-app
imagePullSecrets:
- name: docker-pullsecret

env:
- name: BINGO_SERVICE_URL
  value: bingo.bingo.svc.cluster.local

envOverlay:
- name: LOG_LEVEL
  value: debug
- name: ADDITIONAL_FEATURE
  value: enabled

service:
  extraPorts:
  - name: grpc
    port: 50051

sidecar:
- name: logging-sidecar
  image: busybox
  command: ["sh", "-c", "tail -f /var/log/app.log"]
  volumeMounts:
    - name: logs
      mountPath: /var/log

arch: "arm64"

postgres:
  enabled: true
  image: ghcr.io/cloudnative-pg/postgis:17
  wait: true
  instances: 2
  envPrefix: POSTGRES
  managed:
    roles:
    - name: gel
      connectionLimit: -1
      superuser: true
      createdb: true
      createrole: true
      ensure: present
      inherit: true
      login: true
      inRoles:
      - postgres
  postgresql:
    enableAlterSystem: true
  bootstrap:
    initdb:
      database: gel
      owner: gel
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: cnpg.io/cluster
                operator: In
                values:
                  - galactus-pg
          topologyKey: "topology.kubernetes.io/zone"

rabbitmq:
  enabled: true

initContainers:
- name: wait-for-gel
  image:
    repository: curlimages/curl
    tag: 8.4.0
  command: ['sh', '-c']
  args:
    - |
      until curl -s http://gel:5656/server/status/ready;
      do echo waiting for Gel; sleep 2; done
- name: gel-migration
  inheritEnv: true
  image:
    repository: ghcr.io/example/galactus-migration
  command: []
  args: []
- name: entropy-kaos-service
  inheritEnv: true
  image:
    repository: ghcr.io/example/eks
  restartPolicy: Always
  command:
    - sh
    - -c
  args:
    - |
      apk add --no-cache curl bash
      curl -sSL https://rover.apollo.dev/nix/latest | bash
      export PATH="$HOME/.rover/bin:$PATH"
      rover subgraph introspect http://galactus:3000/graphql | \
      rover subgraph publish star-wars@current \
        --name galactus \
        --schema

ingress:
  enabled: true
  name: app-webhook
  entryPoints:
    - websecure
  match: Host(`app.example.com`)
  middlewares:
    - name: auth-middleware
      namespace: traefik-system
    - name: rate-limit
      namespace: default
  extraRoutes:
  - match: Host(`app.example.com`) && PathPrefix(`/api`)
    kind: Rule
    services:
    - name: galactus
      port: 50051
      passHostHeader: true
secrets:
- apiVersion: v1
  kind: Secret
  metadata:
    name: gel
    annotations:
      secret-generator.v1.mittwald.de/autogenerate: "GEL_PASSWORD"
  type: Opaque
configMaps:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: app-config
  data:
    GEL_TLS_CLIENT_SECURITY: "insecure"

rover:
  enabled: true
  graphRef: star-wars@current
