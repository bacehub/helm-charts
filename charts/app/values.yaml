nameOverride: ""
fullnameOverride: ""
replicaCount: 1
kind: "Deployment"
revision: "latest"
image:
  repository: nginx
  pullPolicy: IfNotPresent
labels: {}


imagePullSecrets: []
env: []
envOverlay: []
envFrom: []
sidecar: []
service:
  enabled: true
  type: ClusterIP
  port: 3000
  name: http
  extraPorts: []

rabbitmq:
  enabled: false
  user: app
  password: ""
  secret:
    name: rabbitmq-app-credentials
    passwordKey: password
    replicateFrom: ""
  host: rabbitmq.rabbitmq-system.svc.cluster.local
  port: 5672

postgres:
  enabled: false
  plugins: []
  envPrefix: POSTGRES
  instances: 2
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/database
                operator: Exists
          - matchExpressions:
              - key: node.kubernetes.io/role
                operator: In
                values:
                  - database
  storage:
    size: 20Gi
    storageClass: "local-path"
  bootstrap: {}
  managed: {}
  postgresql: {}
  wait: false
  backup:
    enabled: false
    schedule: "0 0 0 * * *"
    s3:
      bucketName: ""
      endpointURL: "https://s3.eu-central-2.wasabisys.com"
      credentials:
        secretName: "wasabi-s3"
        accessKeyIdKey: "S3_ACCESS_KEY_ID"
        secretAccessKeyKey: "S3_SECRET_ACCESS_KEY"
    wal:
      compression: gzip

reloader: false

secrets: []

configMaps: []

ingress:
  enabled: false
  entryPoints:
    - websecure
  match: Host(`replaceme.com`)
  middlewares: []
  # - name: auth-middleware
  #   namespace: default
  extraRoutes: []

initContainers: []

rover:
  enabled: false
  graphRef: ""

resources: {}

livenessProbe:
  timeoutSeconds: 2
  initialDelaySeconds: 3
  httpGet:
    path: /health
    port: 3000
readinessProbe:
  timeoutSeconds: 2
  initialDelaySeconds: 3
  httpGet:
    path: /health
    port: 3000

volumes: []
volumeMounts: []
nodeSelector: {}
tolerations: []
affinity: {}
serviceAccount:
  create: false
  automount: false
  annotations: {}
  name: ""
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
securityContext: {}
