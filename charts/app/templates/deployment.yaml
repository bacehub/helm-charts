apiVersion: apps/v1
kind: {{ .Values.kind | default "Deployment" }}
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  {{- if .Values.reloader }}
    reloader.stakater.com/auto: "true"
    reloader.stakater.com/rollout-strategy: "restart"
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      {{- if and .Values.postgres.enabled .Values.postgres.wait }}
        - name: wait-for-postgres
          image: postgres:16
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "app.fullname" . }}-pg-app
                  key: uri
          command: ["sh", "-c"]
          args:
            - |
              until pg_isready -d "$DATABASE_URL"; do
                echo "Waiting for PostgreSQL to be ready...";
                sleep 5;
              done;
      {{- end }}
      {{- range .Values.initContainers }}
        - name: {{ .name }}
          image: "{{ .image.repository }}:{{ .image.tag | default $.Values.revision }}"
          {{- with $.Values.envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- $env := include "app.env" $ | trim }}
          env:
          {{- if .inheritEnv }}
          {{- if $env }}
          {{- $env | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .env }}
          {{ .env | toYaml | nindent 12 }}
          {{- end }}
          {{- if .command }}
          command: {{ .command | toJson }}
          {{- end }}
          {{- if .args }}
          args: {{ .args | toJson }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ include "app.imageTag" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- $env := include "app.env" . | trim }}
          {{- if $env }}
          env:
            {{- $env | nindent 12 }}
          {{- end }}
          {{- if .Values.service.enabled }}
          ports:
          - name: {{ .Values.service.name }}
            containerPort: {{ .Values.service.port }}
            protocol: TCP
          {{- range .Values.service.extraPorts }}
          - name: {{ .name }}
            containerPort: {{ .port }}
            protocol: TCP
          {{- end }}
          {{- end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.sidecar }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- else if and .Values.arch (ne .Values.arch "") }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                {{- if eq .Values.arch "x86" }}
                - amd64
                {{- else if eq .Values.arch "arm64" }}
                - arm64
                {{- end }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
